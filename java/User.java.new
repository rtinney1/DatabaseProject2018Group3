/*User.java
 * Created by: Randi Tinney
 * Created On: Oct 24 2018
 * Updated On: Nov 7 2018
 * Description: User.java is the main class for all users within the Movies-R-Us database.
 * 		It provides methods for registering a user, logging in a user, getting the users data,
 * 		getting a user's rent history, deleting the user, and changing the users data within the database. 
 * 		There are also several admin methods which include getting a list of all users, getting
 * 		the rent history of all users from the last 24 hours, getting the top 10 rented items
 * 		in the last month, and removing a specific user. This class also provides methods for
 * 		rent entertainment and returning entertainment
 */

package application;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.regex.Pattern;

public class User 
{
	Connect connect;
	
	Connection connection;
	
	String email;
	String name;
	String phone;
	String address;
	
	int subPlan;
	
	boolean admin;
	
	/*Default Constructor
	 * If we just need some of the rent history results, this constructor simply constructs
	 * the Connect that is needed to connect to the database
	 */
	public User()
	{
		connect = new Connect();
	}
	
	/*Constructor with email
	 * If we need the user's information, but only have their email address, this constructor
	 * calls on the get method to access the database and construct the user
	 */
	public User(String email)
	{
		connect = new Connect();
		
		get(email);
	}
	
	/*Constructor with all information
	 * If we have all of the user's information and have no need to access the database
	 * this constructor will input the given information into a new user
	 */
	public User(String email, String name, String phone, String address, boolean admin, int subPlan)
	{
		connect = new Connect();
		this.email = email;
		this.name = name;
		this.phone = phone;
		this.address = address;
		this.admin = admin;
		this.subPlan = subPlan;
	}
	
	/*Constructor to login
	 * This constructor should be called if a user is logging in from the front end
	 * it throws a LoginException for the front end to know there was a problem logging
	 * in i.e. the email/password combination was wrong
	 */
	public User(String email, String pass) throws LoginException//char[] pass)
	{
		connect = new Connect();
		login(email, pass);
	}
	
	/*Constructor for registration
	 * This constructor should be called if a user is registering. It calls on
	 * the createUser method which returns true or false. If the user cannot be created
	 * then the constructor will throw a LoginException to the front end (i.e. there is already
	 * a user with that email). If createUser is true, the data is stored within the user
	 */
	public User(String email, String password, String name, String phone, String address, int subPlan, boolean admin) throws LoginException
	{
		connect = new Connect();
		if(!createUser(email, password, name, phone, address, subPlan, admin))
		{
			throw new LoginException("User already exists");
		}
		else
		{
			this.email = email;
			this.name = name;
			this.phone = phone;
			this.address = address;
			this.admin = admin;
			this.subPlan = subPlan;
		}
	}
	
	/*void get(String email)
	 * Accesses the database to get the information of the user when only
	 * the email is known.
	 */
	public void get(String email)
	{
		PreparedStatement statement;
		
		connection = connect.connect();
		
		try
		{
			statement = connection.prepareStatement("SELECT * "
					+ "FROM Users U "
					+ "INNER JOIN Address A ON U.aid = A.aid "
					+ "WHERE user_email = ?");

	        statement.clearParameters();
	        statement.setString(1, email);
			ResultSet resultSet = statement.executeQuery();
					
			if(resultSet.next())
	         {
	        	 this.email = (String)resultSet.getObject(1);
	        	 name = (String)resultSet.getObject(2);
	        	 phone = (String)resultSet.getObject(4);
	        	 address = (String)resultSet.getObject(11) + "$" + (String)resultSet.getObject(10) + "$" + (String)resultSet.getObject(9) + "$" + (int)resultSet.getObject(12);
	        
	        	 admin = (boolean)resultSet.getObject(6);
	        	 
	        	 subPlan = (int)resultSet.getObject(7);
	        	 
		         resultSet.close();
		         statement.close();
		         connect.disconnect(connection);
	         }
	         else
	         {
	        	 resultSet.close();
		         statement.close();
		         connect.disconnect(connection);
	         }
		}
		catch(Exception e)
		{
			connect.disconnect(connection);
			e.printStackTrace();
		}
	}
	
	/*void login(String email, String pass)
	 * Accesses the database to log a user into the front end
	 * Will throw a LoginException if the email/password combination
	 * is wrong or there was an exception thrown.
	 */
	public void login(String email, String pass) throws LoginException
	{
		PreparedStatement statement;
		
		connection = connect.connect();
		try
		{
			statement = connection.prepareStatement("SELECT * "
					+ "FROM Users U "
					+ "INNER JOIN Address A on U.aid = A.aid "
					+ "WHERE user_email = ? AND pass = ?");
			
			statement.clearParameters();
			statement.setString(1, email);
			statement.setString(2, pass);
			
			ResultSet resultSet = statement.executeQuery();
	         // process query results
	         
	         if(resultSet.next())
	         {
	        	 this.email = (String)resultSet.getObject(1);
	        	 name = (String)resultSet.getObject(2);
	        	 phone = (String)resultSet.getObject(4);
	        	 address = (String)resultSet.getObject(11) + "$" + (String)resultSet.getObject(10) + "$" + (String)resultSet.getObject(9) + "$" + (int)resultSet.getObject(12);
	        
	        	 admin = (boolean)resultSet.getObject(6);
	        	 
	        	 subPlan = (int)resultSet.getObject(7);
	        	 
		         resultSet.close();
		         statement.close();
		         connect.disconnect(connection);
	         }
	         else
	         {
	        	 resultSet.close();
		         statement.close();
		         connect.disconnect(connection);
		         throw new LoginException("Invalid username/password");
	         }
		}
		catch(Exception e)
		{
			connect.disconnect(connection);
			e.printStackTrace();
			throw new LoginException("Invalid username/password");
		}
	}
	
	/*boolean createUser(String email, String password, String name, String phone, String address, int subPlan, boolean a)
	 * Access the database to register a user from the front end
	 * Returns boolean for the constructor to know where a LoginException should be thrown
	 * to the front end
	 */
	public boolean createUser(String email, String password, String name, String phone, String address, int subPlan, boolean a)
	{
		PreparedStatement statement;
		String[] addressSplit;
		String street;
		String city;
		String state;
		int aid = 0;
		int zip;
		
		try
		{
			connection = connect.connect();
			statement = connection.prepareStatement("SELECT * "
					+ "FROM Users U "
					+ "WHERE user_email = ?");
			
			statement.clearParameters();
			statement.setString(1, email);
			
			ResultSet resultSet = statement.executeQuery();
	         // process query results
			if(resultSet.next())
			{
				resultSet.close();
		        statement.close();
				connect.disconnect(connection);
				return false;
			}
			else
			{
				addressSplit = address.split(Pattern.quote("$"));
				
				street = addressSplit[0];
				city = addressSplit[1];
				state = addressSplit[2];
				zip = Integer.parseInt(addressSplit[3]);
				
				statement = connection.prepareStatement("SELECT aid FROM Address "
						+ "WHERE state = ? AND city = ? AND street = ? AND zip = ?");
				
				statement.clearParameters();
				statement.setString(1, state);
				statement.setString(2,  city);
				statement.setString(3,  state);
				statement.setInt(4, zip);
				
				resultSet = statement.executeQuery();
				
				if(resultSet.next())
				{
					aid = resultSet.getInt("aid");
							
					statement = connection.prepareStatement("INSERT INTO Users VALUES (?,?,?,?,?,?,?)");
					
					statement.clearParameters();
					statement.setString(1, email);
					statement.setString(2, name);
					statement.setString(3, password);
					statement.setString(4, phone);
					statement.setInt(5, aid);
					statement.setBoolean(6, a);
					statement.setInt(7, subPlan);
					
					statement.executeUpdate();
					
					this.email = email;
					this.name = name;
					this.phone = phone;
					this.address = address;
					this.admin = a;
					this.subPlan = subPlan;
					
					resultSet.close();
			        statement.close();
					connect.disconnect(connection);
					return true;
				}
				else
				{
					statement = connection.prepareStatement("INSERT INTO Address VALUES (?,?,?,?,?)");
					
					statement.clearParameters();
					statement.setInt(1, 0);
					statement.setString(2, state);
					statement.setString(3, city);
					statement.setString(4, street);
					statement.setInt(5, zip);
					
					statement.executeUpdate();
					
					resultSet = statement.executeQuery("SELECT aid FROM Address");
					
					resultSet.last();
					
					aid = resultSet.getInt("aid");
					
					statement = connection.prepareStatement("INSERT INTO Users VALUES (?,?,?,?,?,?,?)");
					
					statement.clearParameters();
					statement.setString(1, email);
					statement.setString(2, name);
					statement.setString(3, password);
					statement.setString(4, phone);
					statement.setInt(5, aid);
					statement.setBoolean(6, a);
					statement.setInt(7, subPlan);
					
					statement.executeUpdate();
					
					this.email = email;
					this.name = name;
					this.phone = phone;
					this.address = address;
					this.admin = a;
					this.subPlan = subPlan;
					
					resultSet.close();
					statement.close();
					connect.disconnect(connection);
					return true;
				}
			}
		}
		catch(Exception e)
		{
			connect.disconnect(connection);
			e.printStackTrace();
			return false;
		}
	}
	
	/*String getEmail()
	 * returns the email of the current user
	 */
	public String getEmail()
	{
		return email;
	}
	
	/*String getName()
	 * returns the name of the current user
	 */
	public String getName()
	{
		return name;
	}
	
	/*String getPhone()
	 * returns the phone number of the current user
	 */
	public String getPhone()
	{
		return phone;
	}
	
	/*boolean getAdmin()
	 * returns whether the current user is an admin or not
	 */
	public boolean getAdmin()
	{
		return admin;
	}
	
	/*String getAddress()
	 * returns the address of the current user. Returns the string delimited by a $ 
	 * between street, city, state, and zip
	 */
	public String getAddress()
	{
		return address;
	}
	
	/*int getSubPlan()
	 * returns the current sub plan of the user
	 */
	public int getSubPlan()
	{
		return subPlan;
	}
	
	/*void printUserInfo()
	 * prints all of the user's information to the console
	 */
	public void printUserInfo()
	{
		System.out.println("email: " + email + " name: "+ name + " phone: " + phone + " address: " + address);
	}
	
	/*void changeName(String name)
	 * Accesses the database to change the current user's name
	 */
	public void changeName(String name)
	{
		PreparedStatement statement;
		
		connection = connect.connect();
		try
		{
			statement = connection.prepareStatement("UPDATE Users SET name = ? WHERE user_email = ?");
			
			statement.clearParameters();
			statement.setString(1, name);
			statement.setString(2, this.email);
			
			statement.executeUpdate();
			
			this.name = name;
			
	        statement.close();
			connect.disconnect(connection);
		}
		catch(Exception e)
		{
			connect.disconnect(connection);
			
		}
	}
	
	/*void changeUserLvl(int userLvl)
	 * Accesses the database to change the current user's userLvl/subplan
	 */
	public void changeUserLvl(int userLvl)
	{
		PreparedStatement statement;
		
		connection = connect.connect();
		try
		{
			statement = connection.prepareStatement("UPDATE Users SET level_id = ? WHERE user_email = ?");
			
			statement.clearParameters();
			statement.setInt(1, userLvl);
			statement.setString(2, this.email);
			
			statement.executeUpdate();

	        statement.close();
			connect.disconnect(connection);
		}
		catch(Exception e)
		{
			connect.disconnect(connection);
			
		}
	}
	
	/*void changePassword(String pass)
	 * Accesses the database to change the current user's password
	 */
	public void changePassword(String pass)
	{
		PreparedStatement statement;
		
		connection = connect.connect();
		try
		{
			statement = connection.prepareStatement("UPDATE Users SET pass = ? WHERE user_email = ?");
			
			statement.clearParameters();
			statement.setString(1, pass);
			statement.setString(2, this.email);
			
			statement.executeUpdate();

	        statement.close();
			connect.disconnect(connection);
		}
		catch(Exception e)
		{
			connect.disconnect(connection);
			
		}
	}
	
	/*void changePhone(String phone)
	 * Accesses the database to change the current user's phone number
	 */
	public void changePhone(String phone)
	{
		PreparedStatement statement;
		
		connection = connect.connect();
		try
		{
			statement = connection.prepareStatement("UPDATE Users SET phone = ? WHERE user_email = ?");
			
			statement.clearParameters();
			statement.setString(1, phone);
			statement.setString(2, this.email);
			
			statement.executeUpdate();
			
			this.phone = phone;
			
	        statement.close();
			connect.disconnect(connection);
		}
		catch(Exception e)
		{
			connect.disconnect(connection);
			
		}
	}
	
	/*void changeAddress(String address)
	 * Accesses the database to change the current user's address.
	 * Assumes the incoming string is a $ delimited string where
	 * street, city, state, and zip are separated by a $
	 */
	public void changeAddress(String address)
	{
		String[] addressSplit;
		String street;
		String city;
		String state;
		int aid = 0;
		int zip;
		
		PreparedStatement statement;
		
		connection = connect.connect();
		
		try
		{
			addressSplit = address.split(Pattern.quote("$"));
			
			street = addressSplit[0];
			city = addressSplit[1];
			state = addressSplit[2];
			zip = Integer.parseInt(addressSplit[3]);
			
			statement = connection.prepareStatement("SELECT aid FROM Address "
					+ "WHERE state = ? AND city = ? AND street = ? AND zip = ?");
			
			statement.clearParameters();
			statement.setString(1, state);
			statement.setString(2, city);
			statement.setString(3, street);
			statement.setInt(4, zip);
			
			ResultSet resultSet = statement.executeQuery();
			
			if(resultSet.next())
			{
				aid = resultSet.getInt("aid");
				
				statement = connection.prepareStatement("UPDATE Users SET aid = ? WHERE user_email = ?");
				
				statement.clearParameters();
				statement.setInt(1, aid);
				statement.setString(2, this.email);
				
				statement.executeUpdate();
				this.address = address;
				
				resultSet.close();
		        statement.close();
				connect.disconnect(connection);
			}
			else
			{
				statement = connection.prepareStatement("INSERT INTO Address VALUES (?,?,?,?,?)");
				
				statement.clearParameters();
				statement.setInt(1, 0);
				statement.setString(2, state);
				statement.setString(3, city);
				statement.setString(4, street);
				statement.setInt(5, zip);
				statement.executeUpdate();
				
				resultSet = statement.executeQuery("SELECT aid FROM Address");
				
				resultSet.last();
				
				aid = resultSet.getInt("aid");
				
				statement = connection.prepareStatement("UPDATE Users SET aid = ? WHERE user_email = ?");
				statement.clearParameters();
				statement.setInt(1, aid);
				statement.setString(2, this.email);
				statement.executeUpdate();
				
				this.address = address;
				
				resultSet.close();
		        statement.close();
				connect.disconnect(connection);
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
			connect.disconnect(connection);
		}
	}
	
	/*void changeAdminLvl(boolean a)
	 * Access the database to change the current user's admin lvl
	 */
	public void changeAdminLvl(boolean a)
	{
		PreparedStatement statement;
		connection = connect.connect();
		
		try
		{
			statement = connection.prepareStatement("UPDATE Users SET is_admin = ? WHERE user_email = ?");
			statement.clearParameters();
			statement.setBoolean(1, a);
			statement.setString(2, this.email);
			
			statement.executeUpdate();

	        statement.close();
			connect.disconnect(connection);
		}
		catch(Exception e)
		{
			e.printStackTrace();
			connect.disconnect(connection);
		}
	}
	
	/*ArrayList<User> getArrayListOfAllItems()
	 * Accesses the database to get an ArrayList of all users currently
	 * registered to Movies-R-Us
	 */
	public ArrayList<User> getArrayListOfAllItems()
	{
		ArrayList<User> list = new ArrayList<User>();
		String address;
		PreparedStatement statement;
		boolean a;
		
		connection = connect.connect();
		
		try
		{
			statement = connection.prepareStatement("SELECT *" + 
					 "FROM Users U " + 
					 "INNER JOIN Address A on U.aid = A.aid");
			statement.clearParameters();
			ResultSet resultSet = statement.executeQuery();
			
			while(resultSet.next())
			{
				address = resultSet.getString("street") + "$" + resultSet.getString("city") + "$" + 
						resultSet.getString("state") + "$" + resultSet.getInt("zip");
				
				list.add(new User(resultSet.getString("user_email"), resultSet.getString("name"), resultSet.getString("phone"), 
						address, resultSet.getBoolean("is_admin"), resultSet.getInt("level_id")));
			}
			
			resultSet.close();
			statement.close();
			connect.disconnect(connection);
			return list;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			connect.disconnect(connection);
			return list;
		}
	}
	
	/*void deleteUser(User u)
	 * Access the database to delete a specific user
	 */
	public void deleteUser(User u)
	{
		PreparedStatement statement;
		connection = connect.connect();
		
		try
		{
			statement = connection.prepareStatement("DELETE FROM Users WHERE email = ?");
			statement.clearParameters();
			statement.setString(1, u.getEmail());
			
			statement.executeUpdate();
			
			statement.close();
			connect.disconnect(connection);
		}
		catch(Exception e)
		{
			e.printStackTrace();
			connect.disconnect(connection);
		}
	}
	
	/*ArrayList<RentHistory> getRentHistory()
	 * Access the database to create an ArrayList of RentHistory
	 * objects for the current user
	 */
	public ArrayList<RentHistory> getRentHistory()
	{
		ArrayList<RentHistory> list = new ArrayList<RentHistory>();
		PreparedStatement statement;
		Timestamp retDate;
		Timestamp rentDate;
		connection = connect.connect();
		
		try
		{
			statement = connection.prepareStatement("SELECT * FROM rent_history R "
					+ "INNER JOIN Entertainment E ON R.eid = E.eid "
					+ "INNER JOIN Users U ON R.user_email = U.user_email "
					+ "WHERE R.user_email = ?");
			
			statement.clearParameters();
			statement.setString(1, this.email);
			
			ResultSet resultSet = statement.executeQuery();
			
			while(resultSet.next())
			{
				rentDate = resultSet.getTimestamp("time_rented");
				retDate = resultSet.getTimestamp("time_returned");
				
				list.add(new RentHistory(resultSet.getInt("eid"), resultSet.getInt("rid"), 
						resultSet.getString("title"), rentDate, retDate));
			}
			
			resultSet.close();
			statement.close();
			connect.disconnect(connection);
			return list;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			connect.disconnect(connection);
			return list;
		}
	}
	
	/*void returnEntertainment(RentHistory x)
	 * Access the database to return the entertainment for the user
	 * if what is passed is the RentHistory object
	 */
	public void returnEntertainment(RentHistory x)
	{
		PreparedStatement statement;
		connection = connect.connect();
		
		try
		{
			Entertainment e = new Entertainment(x.getEID());
			
			statement = connection.prepareStatement("SELECT * FROM rent_history R "
					+ "WHERE R.rid = ?");
			statement.clearParameters();
			statement.setInt(1, x.getRID());
			
			ResultSet resultSet = statement.executeQuery();
			
			if(resultSet.next())
			{
				statement = connection.prepareStatement("UPDATE rent_history SET user_email = ? WHERE rid = ?");
				
				statement.clearParameters();
				statement.setString(1, this.email);
				statement.setInt(2, x.getRID());
				
				statement.executeUpdate();
				
				e.addOneToStock();
			}
			
			statement.close();
			resultSet.close();
			connect.disconnect(connection);
		}
		catch(GetEntertainmentException ge)
		{
			ge.printStackTrace();
			connect.disconnect(connection);
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
			connect.disconnect(connection);
		}
	}
	
	/*ArrayList<RentHistory> adminGetLast24Hours()
	 * Access the database to check the rent history of all users
	 * and create an ArrayList filled with RentHistory objects for those
	 * tuples within the database where time_rented was 24 hours ago
	 */
	public ArrayList<RentHistory> adminGetLast24Hours()
	{
		ArrayList<RentHistory> list = new ArrayList<RentHistory>();
		PreparedStatement statement;
		Calendar calendar;
		Date yesterday;
		Timestamp oneDayAgo;
		Timestamp rentDate;
		
		calendar = Calendar.getInstance();
		calendar.add(Calendar.DATE, -1);
		yesterday = calendar.getTime();
		oneDayAgo = new Timestamp(yesterday.getTime());
		
		connection = connect.connect();
		
		try
		{
			statement = connection.prepareStatement("SELECT * "
					+ "FROM rent_history R "
					+ "INNER JOIN Entertainment E ON R.eid = E.eid "
					+ "INNER JOIN Users U ON R.user_email = U.user_email "
					+ "WHERE R.time_rented > ?");
			
			statement.clearParameters();
			statement.setTimestamp(1, oneDayAgo);
			
			ResultSet resultSet = statement.executeQuery();
			
			while(resultSet.next())
			{
				rentDate = resultSet.getTimestamp("time_rented");
				
				list.add(new RentHistory(resultSet.getInt("eid"), resultSet.getInt("rid"), resultSet.getString("title"),
						resultSet.getString("user_email"), rentDate));
			}
			
			resultSet.close();
			statement.close();
			connect.disconnect(connection);
			return list;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			connect.disconnect(connection);
			return list;
		}
	}
	
	/*ArrayList<RentHistory> adminGetTop10LastMonth()
	 * Access the database to check the rent history of all users
	 * and create an ArrayList filled with RentHistory objects for the
	 * top 10 rented items in the last month
	 */
	public ArrayList<RentHistory> adminGetTop10LastMonth()
	{
		ArrayList<RentHistory> list = new ArrayList<RentHistory>();
		PreparedStatement statement;
		Calendar calendar1;
		Calendar calendar2;
		Date firstDayLastMonth;
		Date firstDayThisMonth;
		Timestamp lastMonth;
		Timestamp startThisMonth;
		
		calendar1 = Calendar.getInstance();
		calendar1.add(Calendar.MONTH, -1);
		calendar1.set(Calendar.DAY_OF_MONTH, 1);
		firstDayLastMonth = calendar1.getTime();
		lastMonth = new Timestamp(firstDayLastMonth.getTime());
		
		calendar2 = Calendar.getInstance();
		calendar2.set(Calendar.DAY_OF_MONTH, 1);
		firstDayThisMonth = calendar2.getTime();
		startThisMonth = new Timestamp(firstDayThisMonth.getTime());
		
		connection = connect.connect();
		
		try
		{
			statement = connection.prepareStatement("SELECT E.eid, E.title, R.rid, COUNT(R.rid) AS Top "
					+ "FROM rent_history R "
					+ "INNER JOIN Entertainment E ON R.eid = E.eid "
					+ "WHERE R.time_rented > ? AND R.time_rented < ? "
					+ "GROUP BY E.eid "
					+ "ORDER BY Top DESC LIMIT 10");
			
			statement.clearParameters();
			statement.setTimestamp(1, lastMonth);
			statement.setTimestamp(2, startThisMonth);
			
			ResultSet resultSet = statement.executeQuery();
			
			while(resultSet.next())
			{				
				list.add(new RentHistory(resultSet.getInt("eid"), resultSet.getString("title"), 
						resultSet.getInt("rid"), resultSet.getLong("Top")));
			}
			
			resultSet.close();
			statement.close();
			connect.disconnect(connection);
			return list;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			connect.disconnect(connection);
			return list;
		}
	}

	/*void rent(Entertainment e)
	 * Allows a user to rent a piece of entertainment
	 * Will throw a RentException if the user cannot rent the
	 * object for some reason
	 */
	public void rent(Entertainment e) throws RentException
	{
		PreparedStatement statement;
		long count;
		int quota=0;

		Calendar calendar;
		Date now;
		Timestamp currentTimestamp;
		
		connection = connect.connect();
		try
		{
			statement = connection.prepareStatement("SELECT total_quota FROM Sub_Plan WHERE level_id = ?");
			statement.clearParameters();
			statement.setInt(1, this.subPlan);
			
			ResultSet resultSet = statement.executeQuery();
			
			if(resultSet.next())
				quota = resultSet.getInt("total_quota");
			
			statement = connection.prepareStatement("SELECT COUNT(rid) AS Num "
					+ "FROM Rent_History R "
					+ "WHERE R.user_email = ? AND (R.time_returned = '0000-00-00 00:00:00' OR R.time_returned = NULL)");
			
			statement.clearParameters();
			statement.setString(1, this.email);
			
			resultSet = statement.executeQuery();
					
			if(resultSet.next())
			{
				count = resultSet.getLong("Num");
				
				if(count < quota)
				{
					calendar = Calendar.getInstance();
					now = calendar.getTime();
					currentTimestamp = new Timestamp(now.getTime());
					
					statement = connection.prepareStatement("INSERT INTO Rent_History VALUES(0,?,?,?,'0000-00-00 00:00:00')");
					
					statement.clearParameters();
					statement.setInt(1, e.getEID());
					statement.setString(2, this.email);
					statement.setTimestamp(3, currentTimestamp);
					
					statement.executeUpdate();
					
					 e.removeOneFromStock();
				}
				else
					throw new RentException("Cannot rent anymore items");
			}
			else
			{
				calendar = Calendar.getInstance();
				now = calendar.getTime();
				currentTimestamp = new Timestamp(now.getTime());
				
				statement = connection.prepareStatement("INSERT INTO Rent_History VALUES(0,?,?,?,'0000-00-00 00:00:00')");
				
				statement.clearParameters();
				statement.setInt(1, e.getEID());
				statement.setString(2, this.email);
				statement.setTimestamp(3, currentTimestamp);
				
				statement.executeUpdate();
				
				e.removeOneFromStock();
			}
			
			statement.close();
			resultSet.close();
			connect.disconnect(connection);
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
			connect.disconnect(connection);
		}
	}
}
